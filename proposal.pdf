CS194 Project Proposal
Jo Getz, Katie-Rose Skelly, Sabelle Smythe, Gus Woythaler

Description of the Project 
  We plan on creating a web-based data visualization tool for the financial data of Row houses. House Financial Managers will upload their weekly spending spreadsheets to our database, which will be parsed into different categories (ie, dairy, bread, produce, etc) and by date. Users will then be presented with graphical displays of their spending based on category as well as spending trends for all available data from their house. Users will also have access to the financial information of other similar residences and be able to compare a selected house’s spending trends to those of other houses. The data will be displayed graphically as line/bar/pie charts on the web page, and the user will be able to select the houses or cohorts of houses they wish to compare (e.g., compare average spending of women-only residences to the spending of Grove). 

Need for the Product 
  The goal of this product is to make budgeting Row house funds on campus easier for Row staff members and more transparent for residents. As of right now, Row student staff members are expected to manage a budget of tens of thousands of dollars with few tools to visualize spending trends or compare their spending to that of other houses, making it difficult to evaluate their budgeting. Additionally, there is virtually no way for students to gain information about their house spending. Stanford students spend $13,166 per year on room and board, but cannot see where virtually any of that money goes, and therefore often do not trust the house spending plans.
  Student staff leave staff training with very little understanding of how to optimize their spending. Typically, house Financial Managers can ask for the previous year’s financial summaries in the form of spreadsheets from their predecessor and are expected to use that budget as a rough outline for their spending. This information means that Financial Managers have just one example of a budget, and one that might be outdated as product prices change and the students in their house vary. With our product, student staff could seamlessly graphically compare their spending to not just previous years’ spending, but to the per-capita spending of other Row houses that year. 
  This product would help students in Row houses trust their student staff more, as students will have a better understanding of how their house funds are spent. The only option for Row residents to find out where their room and board money is going is to sit down with their house Financial Manager and look at spreadsheets with them, which both wastes time and provides very little context for spending. This product would allow them to go online and look at their house’s spending and give them a comparison for their house’s spending. This increased transparency will help both staff budgets and students’ understanding of and trust in their staff.

Potential Audience 
  The potential audience of our project is threefold: first, financial managers for Stanford Row houses; second, residents of Stanford Row houses; and third, ResEd. For financial managers, interacting with the app will take the form of uploading their weekly spreadsheets, and then using the provided set of tools to better visualize and understand their spending patterns. This data will then be available for independent viewing and analysis both by Row house residents and ResEd, allowing for greater transparency and detection of trends. Our intended audience, then, is specific to a subset of Stanford students and administrators. We believe that this specific focus will allow us to design a product that most precisely meets the needs of our users.
  In each of these instances, the level of technical proficiency expected from our users is certainly no more than what the average internet user could be expected to have. Financial managers will need to be able to successfully upload the spreadsheets containing their data, which should be made intuitive in the context of our program, and is comparable to uploading an assignment for a class or any other number of activities that Stanford students successfully navigate each day. Beyond this, using our data visualization tools should be as simple as choosing from a variety of display options. We expect these tasks to be well within the capacity of our anticipated audience.

Discussion of Competing Products 
  We have identified two major competing products. The first is general data management tools, such as Microsoft Excel or Google Sheets - the current software of choice for financial managers. The second is QuickBooks, a suite of accounting software tools designed predominantly for small businesses.
  In our discussions with current Stanford financial managers, we have found that Google Sheets is an effective tool for keeping track of baseline expenses from week to week - and in fact we intend to use these spreadsheets to provide data to our product. Google Sheets also does provide extensive tools for graphical and statistical analysis of data; however, while these tools have the advantage of flexibility, they lack specificity to financial managers’ needs. Generating a chart of weekly expenses using Google Sheets, for example, would require financial managers to sort their expenses into specific categories, choose a method of display, and then generate the visual representation. While this is certainly within the ability of most people, it is an unwieldy and high-effort task, with the result that few financial managers actually take it on. This means that data is largely managed week-to-week, without the ability to extract any broader trends. Additionally, even if a financial manager were to use Google Sheets to try to visualize their spending more intensively, sharing this data with residents would not be an incredibly clear process. While sharing a Google spreadsheet with the whole house or emailing out key figures is not infeasible, residents would benefit from having a centralized repository, such as our product, where they could view this data all together. Perhaps most importantly, Google Sheets is a tool for individual houses - meaning that financial managers have no mechanism for comparing their spending to other houses’, stripping any data they may extract of context. By providing a project with similar functionality to Google Sheets, but with a much more specified purpose, we would allow financial managers to generate, share, and compare data with far less effort than this process currently requires.
  While Stanford has previously considered making QuickBooks available to its financial managers, the switch has as of yet not happened - likely due to the high financial expense of purchasing software, and the significant learning curve for students becoming familiar with it. Our product has the advantage of building on the tools financial managers already use, meaning they would not be forced to acclimate to an entirely new and complex piece of software. Additionally, while more specifically geared towards managing finances than Google Sheets, QuickBooks presents a similar tradeoff between flexibility and specificity. While it presents a broader set of tools for small businesses than our product will provide, it lacks the customization for Stanford financial managers. QuickBooks also does not offer an clear way to compare expenses between “businesses” (in our case, Row houses), a key feature of our product.
  Essentially, our product’s value lies in its specificity. By developing a suite of tools precisely calibrated to Stanford financial managers’ needs, we are able to avoid the steep learning curve and high time costs of current products, while providing a much more detailed set of tools.
	
Major Technologies Used
  We created a Github repository for version and access control purposes; our hope is to hold scrums a couple times a week to check in with each other and make sure responsibilities are properly handled and delegated.
  In terms of the programming itself, we anticipate writing much of the back-end code in Python due to its modularity and having some prior experience with using it to process CSV files. We also anticipate needing to use a language like SQL for back-end database management. On the front end, we may need to use R (or possibly some Python extensions) for data visualization, and the web app itself will likely be created using some combination of HTML/CSS and JavaScript/Node.js.

Resource Requirements
  In order to get this project successfully working, our team will need to create a partnership with various Row houses, particularly through the financial manager network. This sort of project requires the financial spreadsheets of numerous Row houses in order to successfully present meaningful comparisons. Our goal is to pair with at least four Row houses, if not more. As we are able to pull data from various Row houses, our program will become more and more meaningful. Like most big data technologies, the larger the sample set we have, the more accurate and meaningful the data becomes. Therefore, our goal is to get the weekly spreadsheets from as many houses on the Row as possible.
  Furthermore, our team consists of fairly diverse backgrounds in terms of our collective CS knowledge. Together, we have two members on the biocomputation track, one in the information track, and one from the human-computer interaction track. This breadth of background will help us as we create our program, but we will all have to learn nuances of different languages and technologies that we have yet to really delve into. Furthermore, we will have to figure out ways that we can layer together various coding languages in order to develop an aesthetically pleasing and functional application. We have already looked into utilizing resources such as Khan Academy, Codecademy, and other online resources in order to catch up to speed in various topics.
  Beyond these two outside resources, we expect that we won’t run into any abnormal resource needs.

Potential Approaches
  During our brainstorming phase, we had imagined creating a standalone program that would independently work on a single computer. While this would likely be easier to build, a webapp definitely seemed like the correct course of action. With a web app we would be able to securely backup data to a cloud based server for any Row house that uses the application. This would allow houses to compare their finances with other houses, as well as easily examine their past data during the process. Furthermore, the largest benefit of creating this program as a webapp is that all users will have access to real time data from week to week as financial managers upload their spreadsheets.
  Another idea which our group toyed around with was creating an iPhone application which would allow the functionality spoken about in previous sections. Our group strayed away from this implementation for a few different reasons. After speaking with a few financial managers, most stated that they enjoyed using google sheets in order to track their transactions. Furthermore, working with complex tasks on a computer is often easier and more streamlined than when compared on an iPhone. Finally, in terms of team experience, we felt a webapp was a more realistic scope for the quarter seeing that none of us have substantial experience with iOS programming.
  In terms of the visualization of the financial data, our initial idea was to compare each individual house spendings to a single standard Row average. However, after some discussion we felt that users would find more value in being able to compare their house spending to more customized cohorts of other houses. We are now planning on adding options to compare Roth and Jerry, for example, or Sigma Nu to the average of all fraternities rather than the Row average. 

Assessment of Risks
  There are a few risks that our group faces with this project. One major risk is that while we envision a webapp being the correct course of action, none of us really have experience building one. We know that it’s going to be an uphill battle moving forward to create a webapp with no experience, however we believe that it’s a task that is manageable. We envision most of the project being focused upon the backend and the webapp truly just being the avenue which we use to display our various charts and figures.
  Another risk that we foresee may be not being able to get enough financial managers to send us their spreadsheets. We have access to at least three houses’ financial information, so from there in the worst case scenario we will be able to make mock sheets for our development phase. Along the same vein, this project will only be meaningful if financial managers buy into the idea and begin using it. The insights that we envision the app displaying are only beneficial if we get a sizeable amount of data to cross compare. While this is more of an after the fact issue, it would be a disappointment to spend ten weeks on this application only to realize that the financial managers and residents of the Row don’t find it beneficial.

Next Steps
  The first immediate next step is acquiring enough test data to adequately build the back-end of our application. This will involve gathering various house financial managers’ spending spreadsheets from fall quarter; luckily, three of our group members are on different house staffs, so at minimum we will have those three houses’ fall quarter weekly spreadsheets (around 30 in all) to use as test data.
  Once we have gathered this data in spreadsheet form, we will need to figure out how best to parse the spreadsheets into query-able data; we believe that converting them into CSV files and processing them using Python’s “csv” module is the solution here. We need to be able to take this processed information and store it in some sort of “transaction” data structure (amount of money, vendor, date, purpose of spending…) before adding to a database to be queried using SQL.
  Once we have this database, we need to be able to build graphs and visually display the data in an easily-readable way. Some group members have experience using R for graph creation, but we are open to potentially using Python modules for this as well.
  Finally, once the back end is essentially finished, we need to build the front-end, which involves a couple steps. First and foremost, we need to learn how to build a web app; once we have a handle on that, we need to be able to put the graphs we have made into an accessible web app format. If time remains in the quarter once we are satisfied with this progress, we want to add more tools or extensions to the website to make it even more accessible to the users (e.g. displaying comparisons of one house’s spending vs. the Stanford average).
